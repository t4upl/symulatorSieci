import java.util.ArrayList;

public class Prosument extends CoreClass {
	
	protected ArrayList<DayData> dayDataList = new ArrayList<DayData>();

	protected int ID;
	//active user has: EV, battery or generation
	private Boolean active=false;
	
	
	double mnoznikGeneracji=0;

	
	double pojemnoscBaterii =0;//faktyczna pojemnsoc baterii
	double predkoscBaterii = 0; //ile energii moze przekazac bateria w trakcie slotu czasowego
	
	String reportNote="";
	
	//Singletony
	Loader loader = Loader.getInstance();
	Rynek rynek = Rynek.getInstance();
	OptimizerEV optimizerEV = OptimizerEV.getInstance();
	
	//KOSZTY
	
		//calkowity koszt jaki poniesie prosument (z uwzglednieniem ulg za niewykrozystana baterie)
		double totalCost=0;
		
		//jako test (w agregacie powinno byc rowne 0)
		double kosztHandlu=0;
		
		double costNoReserve=0;
		
		//zwrot za energie zromadozna w magazynie i niewykoryzstana
		double reserveBonus=0;
		
	
	//-------------------------------
	
	
		
	public int getID() {
		return ID;
	}
	
	public String getReportNote() {
		return reportNote;
	}

	public void setReportNote(String reportNote) {
		this.reportNote = reportNote;
	}

	public double getReserveBonus() {
		return reserveBonus;
	}

	public void setReserveBonus(double reserveBonus) {
		this.reserveBonus = reserveBonus;
	}

	public double getKosztHandlu() {
		return kosztHandlu;
	}

	public void setKosztHandlu(double kosztHandlu) {
		this.kosztHandlu = kosztHandlu;
	}

	public double getCostNoReserve() {
		return costNoReserve;
	}

	public void setCostNoReserve(double costNoReserve) {
		this.costNoReserve = costNoReserve;
	}

	public void setID(int iD) {
		ID = iD;
	}
	
	public double getTotalCost()
	{
		return this.totalCost;
	}
	
	//--------------
	
	//wywolywane przez ListaProsumentowWrap przy tworzneniu prosuemntow
	public void loadData()
	{
		dayDataList =loader.loadProsument(ID);
	}
	
	float obliczCalkowitaGeneracja()
	{
		float sum=0f;
		
		int a=0;
		DayData d =dayDataList.get(a);
		String date=d.getDayHour();
		
		while (!date.equals(Stale.simulationEndDate))
		{
			d =dayDataList.get(a);
			sum+=d.getGeneration();
			
			a++;
			date = dayDataList.get(a).getDayHour();
		}
		
		return sum;
	}
	
	float obliczCalkowitaKonsumpcje()
	{
		float sum=0f;
		
		int a=0;
		DayData d =dayDataList.get(a);
		String date=d.getDayHour();
		
		while (!date.equals(Stale.simulationEndDate))
		{
			d =dayDataList.get(a);
			sum+=d.getConsumption();
			
			a++;
			date = dayDataList.get(a).getDayHour();
		}
		return sum;
	}
	
	public void aktywujBaterie()
	{
		pojemnoscBaterii=Stale.pojemnoscBateriiIfEnabled;
		predkoscBaterii = Stale.predkoscBaterii;
		active=true;
	}
	
	public void setMnoznikGeneracji(double mnoznikGeneracji2)
	{
		this.mnoznikGeneracji=mnoznikGeneracji2;
		
		if (mnoznikGeneracji2>0)
		{
			active=true;
		}
		
		int a=0;
		while (a<dayDataList.size())
		{
			dayDataList.get(a).countTrueGeneration(mnoznikGeneracji);
			a++;
		}
	}
	
	public void przesunGeneracje()
	{
		//lista z generacja przesunieta o 12 godzin
		ArrayList<Double> L1_trueGeneration = new ArrayList<>();
		ArrayList<Double> L1_Generation = new ArrayList<>();
		
		//o ile goidzn przesunac
		int shiftValue=12;
		int a=12;
		DayData d2 =dayDataList.get(a);
		
		Boolean endDateReached = false;
		
		while (!endDateReached)
		{
			d2 =dayDataList.get(a);
			String dayHourString = d2.getDay()+" "+d2.getHour();
			
			if (dayHourString.equals(Stale.simulationEndDate))
			{
				endDateReached=true;
			}
			
			if (!endDateReached)
			{
				L1_trueGeneration.add(d2.getTrueGeneration());
				L1_Generation.add(d2.getGeneration());

			}
			
			a++;
		}
		
		a=0;
		while (a<shiftValue)
		{
			d2 =dayDataList.get(a);
			L1_trueGeneration.add(d2.getTrueGeneration());
			L1_Generation.add(d2.getGeneration());
			a++;
		}
		
		przesunGeneracjeWstrzyknijlisty(L1_Generation,L1_trueGeneration);					
	}
		
	//przypisuje wartosci z list jako generation i trueGeneration do dayDataList
	void przesunGeneracjeWstrzyknijlisty(ArrayList<Double> generationList, ArrayList<Double> trueGenerationList)
	{
		int a=0;
		while (a<generationList.size())
		{
			DayData d = dayDataList.get(a);
			d.setGeneration(generationList.get(a));
			d.setTrueGeneration(trueGenerationList.get(a));
			
			a++;
		}
	}
	
	
	public void performEndOfSimulationCalculations()
	{
		
		if (LokalneCentrum.getIsHandelWSieci())
		{
			performEndOfSimulationCalculationsHandelWSieci();
			//getInput("performEndOfSimulationCalculations remians to be done");
		}
		else
		{
			performEndOfSimulationCalculationsBrakHandluWSieci();
		}
		
		obliczTotalCost();
		obliczRezerwe();
	}
	
	void performEndOfSimulationCalculationsHandelWSieci()
	{
		if (active)
		{
			performEndOfSimulationCalculationsHandelWSieciActive();
		}
		else
		{
			performEndOfSimulationCalculationsHandelWSieciPassive();
		}
	}
	
	//wolanne tez z agregatora
	public void obliczRezerwe()
	{		
		double stanBateriiNakoniecSymulacji =dayDataList.get(LokalneCentrum.getSimulationEndDateIndex()).getStanBateriiNaPoczatkuSlotu();
				
		reserveBonus = 0;
		reserveBonus +=stanBateriiNakoniecSymulacji*Stale.kosztAmortyzacjiBaterii;
		
		totalCost= costNoReserve -reserveBonus;
		
		
	}
	
	
	//wolane tez z agregatora
	public void obliczTotalCost()
	{
		totalCost=0;
		costNoReserve=0;
		
		int i=0;
		while (i<LokalneCentrum.getSimulationEndDateIndex())
		{
			totalCost+=dayDataList.get(i).getCost();
			i++;
		}
		
		costNoReserve=totalCost;
	}
	
	void performEndOfSimulationCalculationsHandelWSieciActive()
	{
		int i=0;
		while (i<LokalneCentrum.getSimulationEndDateIndex())
		{
			DayData d = dayDataList.get(i);
			d.setCost(d.getKoszt_opt()+d.getConsumption()*Stale.cenaDystrybutoraZewnetrznego);
			i++;
		}
	}
	
	void performEndOfSimulationCalculationsHandelWSieciPassive()
	{
		int i=0;
		while (i<LokalneCentrum.getSimulationEndDateIndex())
		{
			DayData d = dayDataList.get(i);
			
			d.setKoszt_handel(d.getZRynekNaKonsumpcje()*d.getCenaNaLokalnymRynku());
			
			double nieZrownowazonaKonsumpcja = d.getConsumption() - d.getZRynekNaKonsumpcje();
			
			d.setKoszt_Zew(nieZrownowazonaKonsumpcja*Stale.cenaDystrybutoraZewnetrznego);
			
			d.setCost(d.getKoszt_handel()+d.getKoszt_Zew());
			
			i++;
		}
	}
	
	void performEndOfSimulationCalculationsBrakHandluWSieci()
	{
		int i=0;
		while (i<LokalneCentrum.getSimulationEndDateIndex())
		{
			DayData d = dayDataList.get(i);
			
			double niezrownowazonakonsumpcja = d.getConsumption()-d.getZGeneracjiNaKonsumpcje()-d.getZBateriiNaKonsumpcje();
			d.setKoszt_Zew(niezrownowazonakonsumpcja*Stale.cenaDystrybutoraZewnetrznego);
			
			d.setKoszt_sklad(d.getZGeneracjiDoBaterii()*Stale.kosztAmortyzacjiBaterii);
			
			d.setCost(d.getKoszt_Zew()+d.getKoszt_sklad());
			
			
			i++;
		}
	}

	public ArrayList getDayDataList() {
		return this.dayDataList;
	}
	
	//buduje pusta liste DayData skaldajaca o dlugosci size 
	public void createEmptyDataList(int size)
	{	
		int a=0;
		while (a<size)
		{
			DayData d = new DayData();
			dayDataList.add(d);
			a++;
		}
	}
	
	
	//dodaj DayDaty z DayData list prosumenta2 do this 
	//ID for debug only
	public void addProsument(Prosument prosument2,int ID)
	{		
		ArrayList<DayData> dayDataList = this.getDayDataList();
		ArrayList<DayData> dayDataList2 = prosument2.getDayDataList();

		int a=0;
		while (a<dayDataList.size())
		{
			DayData dayData = dayDataList.get(a);
			DayData dayData2 = dayDataList2.get(a);
			
			dayData.addDayData(dayData2,ID,a);
	
			a++;
		}
	}
	
	public void zaktualizujHandelBrakHandlu()
	{			
		DayData dayData2 = dayDataList.get(LokalneCentrum.getTimeIndex());
		
		double generation = dayData2.getTrueGeneration();
		double consumption = dayData2.getConsumption();
		
		if (generation>consumption)
		{
			
			double generacjaDoBaterii = generation-dayData2.getConsumption();
			
			dayData2.setZGeneracjiNaKonsumpcje(dayData2.getConsumption());
			zaktualizujHandelBrakHandluChargeBattery(generacjaDoBaterii,dayData2);
		}
		else
		{
			dayData2.setZGeneracjiNaKonsumpcje(generation);
			double nieZaspokojonaKonsumpcja = consumption-generation;
			zaktualizujHandelBrakHandluDischargeBattery(nieZaspokojonaKonsumpcja,dayData2);
		}
		
		DayData dayDataWKolejnymSlocie = dayDataList.get(LokalneCentrum.getTimeIndex()+1);

		
		zaktualizujHandelBrakHandluUstalStanBateriiWKolejnymSlocie(dayData2,dayDataWKolejnymSlocie );
		
	}
	
	
	void zaktualizujHandelBrakHandluUstalStanBateriiWKolejnymSlocie(DayData dayData2 ,DayData dayDataWKolejnymSlocie)
	{
		double wartoscBaterii =dayData2.getStanBateriiNaPoczatkuSlotu()+dayData2.getZGeneracjiDoBaterii()-dayData2.getZBateriiNaKonsumpcje();
		
		dayDataWKolejnymSlocie.setStanBateriiNaPoczatkuSlotu(wartoscBaterii);
		
	}
	
	//value -wartsoc jaka chcialby doladowac prosument
	void zaktualizujHandelBrakHandluChargeBattery(double value,DayData d)
	{
		value =Math.min(value, predkoscBaterii);
		
		//ilosc energii jaka jest w baterii
		double capacityLeft = pojemnoscBaterii -d.getStanBateriiNaPoczatkuSlotu();
		
		value = Math.min(value, capacityLeft);
		d.setZGeneracjiDoBaterii(value);
	}
	
	//value -wartsoc jaka chcialby rozladoladowac prosument
	void zaktualizujHandelBrakHandluDischargeBattery(double value,DayData d)
	{
		value =Math.max(value, 0);
		value =Math.min(value, predkoscBaterii);
		value = Math.min(value,d.getStanBateriiNaPoczatkuSlotu());
		d.setZBateriiNaKonsumpcje(value);
	}
	
	//TODO
	//price vector ma postac (0) -mniejsza cena dla najblizszego slotu, (1) -normlana, (2) -wieksza
	public void takeFirstPriceVector(ArrayList<ArrayList<Double>> ListOfPriceVectors)
	{	
		Point p1 = null;
		Point p2 = null;
		Point p3 = null;
		
		ArrayList<Double> priceVector = ListOfPriceVectors.get(1);
		ArrayList<Double> priceVectorSmallerMod= ListOfPriceVectors.get(0);
		ArrayList<Double> priceVectorBiggerMod= ListOfPriceVectors.get(2);
		
		
		//wyznacz steorwanie gdy prosument jest aktywny lub scneariusz testowy
		if (active)
		{						
			OptimizerEV.Sterowanie sterowanieForPriceVector =wyznaczSterowanieDlaAktywnegoProsumenta(priceVector);			
			OptimizerEV.Sterowanie sterowanieForpriceVectorSmallerMod =wyznaczSterowanieDlaAktywnegoProsumenta(priceVectorSmallerMod);
			OptimizerEV.Sterowanie sterowanieForPriceVectorBiggerMod =wyznaczSterowanieDlaAktywnegoProsumenta(priceVectorBiggerMod);
						
			p1 = getPunktFunkcjiUzytecznosci(sterowanieForPriceVector,priceVector);
			p2 = getPunktFunkcjiUzytecznosci(sterowanieForpriceVectorSmallerMod,priceVectorSmallerMod);
			p3 = getPunktFunkcjiUzytecznosci(sterowanieForPriceVectorBiggerMod,priceVectorBiggerMod);
			
		}
		else
		{
			p1 = getPunktFunkcjiUzytecznosciDlaPasywnegoProsumenta(priceVector);
			p2 = getPunktFunkcjiUzytecznosciDlaPasywnegoProsumenta(priceVectorSmallerMod);
			p3 = getPunktFunkcjiUzytecznosciDlaPasywnegoProsumenta(priceVectorBiggerMod);
		}
		
		
		rynek.addPricePoint(this,p1);
		rynek.addPricePoint(this,p2);
		rynek.addPricePoint(this,p3);
		
	}
	
	Point getPunktFunkcjiUzytecznosciDlaPasywnegoProsumenta(ArrayList<Double> priceVector)
	{
		Point point = new Point();
		point.setPrice(priceVector.get(0));	
		
		DayData d =dayDataList.get(LokalneCentrum.getTimeIndex());
		
		double wolumenEnergii=d.getConsumption();
		point.setIloscEnergiiDoKupienia(wolumenEnergii);
		return point;
	}
	
	//przerabia sterowanie i wektor cen na punkt uzytecznosci
	Point getPunktFunkcjiUzytecznosci(OptimizerEV.Sterowanie sterowanie, ArrayList<Double> priceVector)
	{
		Point point = new Point();
		
		point.setPrice(priceVector.get(0));	
		//uncommented for debug
		DayData d =sterowanie.getDList().get(0);
		
		double sprzedaz = d.getZBateriiNaRynek()+d.getZGeneracjiNaRynek();
		double kupno = d.getZRynekDoBaterii()+d.getZRynekNaKonsumpcje();
		
		//to co zostanie wpiusane do point (chec kupna, moze byc ujemna)
		double wolumenEnergii;
		
		//0.5, bo blad w reprezentacji double'a
		if (d.getKupuj()>0.5)
		{
			wolumenEnergii=kupno;
		}
		else
		{
			wolumenEnergii=-sprzedaz;

		}
		point.setIloscEnergiiDoKupienia(wolumenEnergii);
		
		return point;
	}		
	
	
	
	
	OptimizerEV.Sterowanie wyznaczSterowanieDlaAktywnegoProsumenta (ArrayList<Double> priceVector)
	{
		OptimizerEV.Sterowanie sterowanie = new OptimizerEV.Sterowanie();
		OptimizerEV.Form form =createForm24(priceVector);
		sterowanie =optimizerEV.wyznaczSterowanie(form);
				
		return sterowanie;
	}
	
	OptimizerEV.Sterowanie wyznaczSterowanieDlaAktywnegoProsumenta (ArrayList<Double> priceVector, DayData constainMarker)
	{
		OptimizerEV.Sterowanie sterowanie = new OptimizerEV.Sterowanie();
		OptimizerEV.Form form =createForm24(priceVector, constainMarker);
		sterowanie =optimizerEV.wyznaczSterowanie(form);
		
		return sterowanie;
	}
	
	OptimizerEV.Form createForm24(ArrayList<Double> priceVector, DayData constainMarker)
	{
		OptimizerEV.Form form = createForm24(priceVector);
		
		form.setOgraniczeniaHandluDom(constainMarker);
				
		return form;
	}
	
	
	OptimizerEV.Form createForm24(ArrayList<Double> priceVector)
	{
		OptimizerEV.Form form = new OptimizerEV.Form();
		
		form.setIDprosumenta(ID);
		
		ArrayList<Double> generation = new ArrayList<>();
		ArrayList<Double> consumption = new ArrayList<>();
		
		int i=0;
		while (i<Stale.horyzontCzasowy)
		{
			int indeks = i+LokalneCentrum.getTimeIndex();
			DayData d = dayDataList.get(indeks);
			
			consumption.add(d.getConsumption());
			generation.add(d.getTrueGeneration());
			
			i++;
		}
		
		form.setConsumption(consumption);
		form.setGeneration(generation);
		
		DayData d = dayDataList.get(LokalneCentrum.getTimeIndex());

		form.setStanPoczatkowyEB(d.getStanBateriiNaPoczatkuSlotu());
		
		form.setPrices(priceVector);
		
		form.setPojemnoscBaterii(pojemnoscBaterii);
		form.setPredkoscBaterii(this.predkoscBaterii);
		
		form.setIsEVAvailable(false);
		
		
		return form;
	}
	
	public void takePriceVector(ArrayList<Double> priceVector)
	{		
		Point p1 =null;
		if (active)
		{	
			OptimizerEV.Sterowanie sterowanieForPriceVector =wyznaczSterowanieDlaAktywnegoProsumenta(priceVector);	
			p1 = getPunktFunkcjiUzytecznosci(sterowanieForPriceVector,priceVector);
			
			//int transactionIteration = rynek.getIteracja();
			//reporter.createSterowanieReport(sterowanieForPriceVector,this,"",priceVector, transactionIteration);
		}
		else
		{
			p1 = getPunktFunkcjiUzytecznosciDlaPasywnegoProsumenta(priceVector);
		}
		
		rynek.addPricePoint(this,p1);
		
		//transactionIteration++;
	}
	
	
	void putSterowanieIntoDayData(OptimizerEV.Sterowanie sterowanieForPriceVector)
	{
		int currentTime =LokalneCentrum.getTimeIndex();
		
		ArrayList<DayData> dList =sterowanieForPriceVector.getDList();
		DayData d =dList.get(0);
		d.setGeneration(dayDataList.get(currentTime).getGeneration());
		dayDataList.set(currentTime, d);
		
		//przepisz stan baterii w kolejnym slocie
		dayDataList.get(currentTime+1).setStanBateriiNaPoczatkuSlotu(dList.get(1).getStanBateriiNaPoczatkuSlotu());
		
	}
	
	//TODO
	//wykonaj optymalizacje przy uwzglednieniu wynikow handlu
	public void getKontrakt(ArrayList<Double> priceVector, DayData constainMarker)
	{	
		int timeIndex =LokalneCentrum.getTimeIndex();
		
		double cenaNaRynkuLokalnym = priceVector.get(0);
		
		if (active)
		{
			OptimizerEV.Sterowanie sterowanieForPriceVector =wyznaczSterowanieDlaAktywnegoProsumenta(priceVector,constainMarker );
			
			putSterowanieIntoDayData(sterowanieForPriceVector);
			
		}
		else
		{
			
			double nabytaEnergia = constainMarker.getGeneration();
			DayData d =dayDataList.get(timeIndex);
			nabytaEnergia = Math.min(nabytaEnergia,d.getConsumption());
			
			d.setZRynekNaKonsumpcje(nabytaEnergia);
			d.setCenaNaLokalnymRynku(cenaNaRynkuLokalnym);
			
			
			dayDataList.set(timeIndex, d);
		}
	}
	
	
	
	
}
