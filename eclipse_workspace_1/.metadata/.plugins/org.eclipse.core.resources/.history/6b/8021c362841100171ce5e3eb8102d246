import java.util.ArrayList;



public class Agregator {
	
	private int scenariusz = Stale.scenariusz;
	
	//String outputFolder;
	private ArrayList<Prosument> listaProsumentow;
	String simulationEndDate=Stale.simulationEndDate;
	
	//SYSTEM
	Reporter reporter = Reporter.getInstance();

	
	//Singleton shit
	private static Agregator instance = null;
	private Agregator() 
	{
	}
	
	public static Agregator getInstance() {
	      if(instance == null) {
	         instance = new Agregator();
	      }
	      return instance;
	}
	//--------------------------
	//SETTERS
	
	public void setListaProsumentow(ArrayList<Prosument> listaProsumentow)
	{
		this.listaProsumentow =  listaProsumentow;
	}
	
	//--------------------------
	//OTHER FUNCTIONS
	
	//TODO
	//--------------------------
	//OTHER FUNCTIONS
	
	//TODO
	void run()
	{
		
		//indexy prosumentow biorace udzial w agregacji
		Integer[] indexArray = createArray(0,listaProsumentow.size() );		
		createAgregateReport(100,indexArray,"all prosuments");
		
		//Uwaga! create array zwraca tablice indeksow a nie ID prosumentow!
		indexArray = createArray(0,4);
		createAgregateReport(101,indexArray,"pierwszych 4");
		
		indexArray = createArray(4,16-4);
		createAgregateReport(102,indexArray,"ostatnich 12");
		
		indexArray = createArray(5,2);
		createAgregateReport(102,indexArray,"prosumenci 5_6");
	}
	
	Integer[] createArray(int indexPoczatkowy, int liczbaElementow)
	{
		Integer[] indexArray = new Integer[liczbaElementow];	
		int a=0;
		while(a<liczbaElementow)
		{
			indexArray[a]=indexPoczatkowy+a;
			a++;
		}
		
		return indexArray;
	}
	
	void createAgregateReport(int ID, Integer[] indexArray, String reportNote)
	{
		Prosument prosument2 = createNewProsument(ID);
		prosument2.setReportNote(reportNote);
		
		int a=0;
		while (a<indexArray.length)
		{	
			//print(indexArray[a].toString());
			


			int IDdodawanegoProsumenta =indexArray[a];
			Prosument dodawanyProsument =listaProsumentow.get(IDdodawanegoProsumenta);
			
			addProsument(prosument2,dodawanyProsument,IDdodawanegoProsumenta  );
			
		
			a++;
		}
		
		prosument2.DayDataDivide(indexArray.length);
		
		//false bo unused geenration licozna jako srednia a nie na podstawie danych
		prosument2.performEndOfSimulationCalculations(false);
		
		
		reporter.createProsumentReport(prosument2);

	}
	
	Prosument createNewProsument(int ID)
	{
		Prosument prosument = new Prosument();
		prosument.setID(ID);
		//prosument2.setSimulationEndDateJustDay(simulationEndDate);
		prosument2.deepCopyProsument2(listaProsumentow.get(0));
		//prosument2.setOutputFolder(outputFolder);
		//prosument2.resetDayDataListToZero();
		
		return prosument2;
	}
	
}
